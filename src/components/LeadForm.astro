---
// Lead Form Component
---

<div id="lead-modal" class="modal-overlay hidden">
  <div class="modal-content">
    <button class="modal-close" id="close-modal">&times;</button>
    <div class="modal-header">
      <h3>Agende a Avaliação do seu Bebê</h3>
      <p>Preencha seus dados e nossa equipe entrará em contato</p>
    </div>
    
    <form id="lead-form" class="lead-form">
      <div class="form-group">
        <label for="phone">Telefone *</label>
        <input 
          type="tel" 
          id="phone" 
          name="phone" 
          required 
          value="+55 "
          placeholder="+55 (11) 99999-9999"
        />
      </div>
      
      <div class="form-group">
        <label for="email">E-mail (opcional)</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          placeholder="seu@email.com"
        />
      </div>
      
      <!-- Hidden fields -->
      <input type="hidden" name="gclid" id="gclid" />
      <input type="hidden" name="gbraid" id="gbraid" />
      <input type="hidden" name="fbclid" id="fbclid" />
      <input type="hidden" name="utm_source" id="utm_source" />
      <input type="hidden" name="utm_medium" id="utm_medium" />
      <input type="hidden" name="utm_campaign" id="utm_campaign" />
      <input type="hidden" name="utm_content" id="utm_content" />
      <input type="hidden" name="utm_term" id="utm_term" />
      <input type="hidden" name="page_url" id="page_url" />
      <input type="hidden" name="fbc" id="fbc" />
      <input type="hidden" name="fbp" id="fbp" />
      <input type="hidden" name="user_agent" id="user_agent" />
      <input type="hidden" name="user_ip" id="user_ip" />
      <input type="hidden" name="google_session_attribute" id="google_session_attribute" />
      
      <button type="submit" class="submit-btn" id="submit-btn">
        <span class="btn-text">Agendar Avaliação</span>
        <span class="btn-loading hidden">Enviando...</span>
      </button>
    </form>
    
    <div id="success-message" class="success-message hidden">
      <div class="success-icon">✓</div>
      <h4>Dados enviados com sucesso!</h4>
      <p>Nossa equipe entrará em contato em breve.</p>
    </div>
  </div>
</div>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(4px);
  }
  
  .modal-overlay.hidden {
    display: none;
  }
  
  .modal-content {
    background: white;
    border-radius: 16px;
    padding: 32px;
    max-width: 480px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
  }
  
  .modal-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s;
  }
  
  .modal-close:hover {
    background: #f3f4f6;
    color: #333;
  }
  
  .modal-header {
    text-align: center;
    margin-bottom: 24px;
  }
  
  .modal-header h3 {
    color: #74B077;
    font-size: 24px;
    font-weight: 600;
    margin: 0 0 8px 0;
  }
  
  .modal-header p {
    color: #666;
    font-size: 16px;
    margin: 0;
  }
  
  .lead-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  
  .form-group label {
    font-weight: 500;
    color: #333;
    font-size: 14px;
  }
  
  .form-group input {
    padding: 12px 16px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 16px;
    transition: border-color 0.2s;
  }
  
  .form-group input:focus {
    outline: none;
    border-color: #74B077;
  }
  
  .submit-btn {
    background: linear-gradient(135deg, #74B077 0%, #3C81A4 100%);
    color: white;
    border: none;
    padding: 16px 24px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    position: relative;
  }
  
  .submit-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(116, 176, 119, 0.3);
  }
  
  .submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
  }
  
  .btn-loading.hidden,
  .btn-text.hidden {
    display: none;
  }
  
  .success-message {
    text-align: center;
    padding: 20px;
  }
  
  .success-message.hidden {
    display: none;
  }
  
  .success-icon {
    width: 60px;
    height: 60px;
    background: #74B077;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    font-weight: bold;
    margin: 0 auto 16px;
  }
  
  .success-message h4 {
    color: #74B077;
    font-size: 20px;
    margin: 0 0 8px 0;
  }
  
  .success-message p {
    color: #666;
    margin: 0;
  }
  
  @media (max-width: 768px) {
    .modal-content {
      padding: 24px;
      margin: 16px;
    }
  }
</style>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Initialize Supabase client
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co';
  const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key';

  console.log('Supabase URL carregada:', supabaseUrl);
  console.log('Supabase Anon Key carregada:', supabaseAnonKey);

  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Submit lead function
  async function submitLead(lead) {
    const { data, error } = await supabase
      .from('leads')
      .insert([lead]);
    
    if (error) {
      throw error;
    }
    
    return data;
  }

  // Get Facebook parameters from cookies
  function getFacebookParams() {
    const cookies = document.cookie.split(';');
    let fbc = '';
    let fbp = '';
    
    cookies.forEach(cookie => {
      const [name, value] = cookie.trim().split('=');
      if (name === '_fbc') fbc = value;
      if (name === '_fbp') fbp = value;
    });
    
    return { fbc, fbp };
  }

  // Phone number state management
  let currentCleanPhoneNumber = '';

  // Phone formatting function
  function formatPhoneNumber(cleanDigits) {
    console.log('=== INÍCIO formatPhoneNumber ===');
    console.log('Dígitos limpos recebidos:', cleanDigits);

    // Format based on the number of digits
    let formatted = '+55 ';

    if (cleanDigits.length === 0) {
      return formatted;
    } else if (cleanDigits.length <= 2) {
      // DDD only
      console.log('Formatando: DDD apenas');
      formatted += `(${cleanDigits}`;
    } else if (cleanDigits.length <= 6) {
      // DDD + partial number
      const ddd = cleanDigits.slice(0, 2);
      const phoneStart = cleanDigits.slice(2);
      console.log('Formatando: DDD + início do telefone');
      console.log('DDD:', ddd, 'Início do telefone:', phoneStart);
      formatted += `(${ddd}) ${phoneStart}`;
    } else if (cleanDigits.length <= 10) {
      // DDD + 8 digits (landline)
      const ddd = cleanDigits.slice(0, 2);
      const phoneFirst = cleanDigits.slice(2, 6);
      const phoneLast = cleanDigits.slice(6, 10);
      console.log('Formatando: Telefone fixo (8 dígitos)');
      console.log('DDD:', ddd, 'Primeira parte:', phoneFirst, 'Segunda parte:', phoneLast);
      formatted += `(${ddd}) ${phoneFirst}-${phoneLast}`;
    } else {
      // DDD + 9 digits (mobile)
      const ddd = cleanDigits.slice(0, 2);
      const phoneFirst = cleanDigits.slice(2, 7);
      const phoneLast = cleanDigits.slice(7, 11);
      console.log('Formatando: Celular (9 dígitos)');
      console.log('DDD:', ddd, 'Primeira parte:', phoneFirst, 'Segunda parte:', phoneLast);
      formatted += `(${ddd}) ${phoneFirst}-${phoneLast}`;
    }

    console.log('Resultado formatado:', formatted);
    console.log('=== FIM formatPhoneNumber ===');
    return formatted;
  }

  // Calculate cursor position after formatting
  function calculateCursorPosition(cleanDigits, cursorInClean) {
    console.log('Calculando posição do cursor para:', cleanDigits, 'cursor em:', cursorInClean);
    
    let position = 0;
    let digitCount = 0;
    
    // Build the formatted string character by character and count position
    const formatted = formatPhoneNumber(cleanDigits);
    
    for (let i = 0; i < formatted.length && digitCount < cursorInClean; i++) {
      const char = formatted[i];
      position++;
      
      // If it's a digit, increment our digit counter
      if (/\d/.test(char)) {
        digitCount++;
      }
    }
    
    console.log('Posição calculada do cursor:', position);
    return position;
  }

  // Get URL parameters
  function getUrlParams() {
    const params = new URLSearchParams(window.location.search);
    return {
      gclid: params.get('gclid') || '',
      gbraid: params.get('gbraid') || '',
      fbclid: params.get('fbclid') || '',
      utm_source: params.get('utm_source') || '',
      utm_medium: params.get('utm_medium') || '',
      utm_campaign: params.get('utm_campaign') || '',
      utm_content: params.get('utm_content') || '',
      utm_term: params.get('utm_term') || '',
    };
  }

  // Initialize hidden fields
  function initializeHiddenFields() {
    const urlParams = getUrlParams();
    const fbParams = getFacebookParams();
    
    // Set URL parameters
    Object.entries(urlParams).forEach(([key, value]) => {
      const element = document.getElementById(key);
      if (element) element.value = value;
    });
    
    // Set Facebook parameters
    Object.entries(fbParams).forEach(([key, value]) => {
      const element = document.getElementById(key);
      if (element) element.value = value;
    });
    
    // Set other parameters
    const pageUrlElement = document.getElementById('page_url');
    if (pageUrlElement) pageUrlElement.value = window.location.href;
    
    const userAgentElement = document.getElementById('user_agent');
    if (userAgentElement) userAgentElement.value = navigator.userAgent;
  }

  // Modal functionality
  function initializeModal() {
    const modal = document.getElementById('lead-modal');
    const closeBtn = document.getElementById('close-modal');
    
    // Close modal
    closeBtn?.addEventListener('click', () => {
      modal?.classList.add('hidden');
      document.body.style.overflow = 'auto';
    });
    
    // Close on overlay click
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }
    });
  }

  // Function to open modal (will be called from main page)
  function openModal() {
    const modal = document.getElementById('lead-modal');
    modal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  // Make openModal available globally
  window.openLeadModal = openModal;

  // Form submission function
  function initializeForm() {
    const form = document.getElementById('lead-form');
    const phoneInput = document.getElementById('phone');
    const submitBtn = document.getElementById('submit-btn');
    const btnText = submitBtn?.querySelector('.btn-text');
    const btnLoading = submitBtn?.querySelector('.btn-loading');
    const successMessage = document.getElementById('success-message');
    
    // Phone formatting
    phoneInput?.addEventListener('input', (e) => {
      const target = e.target;
      console.log('>>> EVENTO INPUT DISPARADO <<<');
      
      // Get only the digits from the current value
      const allDigits = target.value.replace(/\D/g, '');
      console.log('Todos os dígitos extraídos:', allDigits);
      
      // Remove the country code (55) if present to get local digits
      let localDigits = allDigits;
      if (allDigits.startsWith('55') && allDigits.length > 2) {
        localDigits = allDigits.substring(2);
      }
      console.log('Dígitos locais extraídos:', localDigits);
      
      // Update clean state directly with extracted digits
      currentCleanPhoneNumber = localDigits;
      console.log('Estado limpo atualizado:', currentCleanPhoneNumber);
      
      // Calculate cursor position in clean digits (at the end for normal typing)
      const cursorInClean = currentCleanPhoneNumber.length;
      console.log('Posição do cursor nos dígitos limpos:', cursorInClean);
      
      // Format the phone number
      const newValue = formatPhoneNumber(currentCleanPhoneNumber);
      console.log('Novo valor formatado:', newValue);
      
      // Calculate new cursor position
      const newCursorPosition = calculateCursorPosition(currentCleanPhoneNumber, cursorInClean);
      
      // Update the field
      target.value = newValue;
      
      // Set cursor position
      target.setSelectionRange(newCursorPosition, newCursorPosition);
      console.log('Cursor posicionado em:', newCursorPosition);
      console.log('>>> FIM EVENTO INPUT <<<\n');
    });

    // Handle focus to position cursor correctly
    phoneInput?.addEventListener('focus', (e) => {
      const target = e.target;
      console.log('Campo focado. Valor atual:', target.value);
      if (currentCleanPhoneNumber === '') {
        target.setSelectionRange(4, 4);
        console.log('Cursor posicionado após +55');
      } else {
        // Position cursor at the end
        const cursorPos = calculateCursorPosition(currentCleanPhoneNumber, currentCleanPhoneNumber.length);
        target.setSelectionRange(cursorPos, cursorPos);
        console.log('Cursor posicionado no final:', cursorPos);
      }
    });

    // Handle keydown to prevent deleting the +55 prefix
    phoneInput?.addEventListener('keydown', (e) => {
      const target = e.target;
      const cursorPosition = target.selectionStart;
      
      console.log('Tecla pressionada:', e.key, 'Posição do cursor:', cursorPosition);
      
      // Handle backspace
      if (e.key === 'Backspace') {
        if (cursorPosition <= 4) {
          // Prevent deleting the +55 prefix
          console.log('Tentativa de apagar prefixo +55 bloqueada');
          e.preventDefault();
        } else if (currentCleanPhoneNumber.length > 0) {
          // Remove the last digit from clean state
          e.preventDefault();
          currentCleanPhoneNumber = currentCleanPhoneNumber.slice(0, -1);
          console.log('Dígito removido, novo estado limpo:', currentCleanPhoneNumber);
          
          const newValue = formatPhoneNumber(currentCleanPhoneNumber);
          target.value = newValue;
          
          const newCursorPos = calculateCursorPosition(currentCleanPhoneNumber, currentCleanPhoneNumber.length);
          target.setSelectionRange(newCursorPos, newCursorPos);
        }
      }
      
      // Handle delete key
      if (e.key === 'Delete' && cursorPosition <= 4) {
        console.log('Tentativa de apagar prefixo +55 com Delete bloqueada');
        e.preventDefault();
      }
    });
    
    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnLoading?.classList.remove('hidden');
      
      try {
        const formData = new FormData(form);
        const lead = {
          phone: formData.get('phone'),
          email: formData.get('email') || undefined,
          gclid: formData.get('gclid') || undefined,
          gbraid: formData.get('gbraid') || undefined,
          fbclid: formData.get('fbclid') || undefined,
          utm_source: formData.get('utm_source') || undefined,
          utm_medium: formData.get('utm_medium') || undefined,
          utm_campaign: formData.get('utm_campaign') || undefined,
          utm_content: formData.get('utm_content') || undefined,
          utm_term: formData.get('utm_term') || undefined,
          page_url: formData.get('page_url') || undefined,
          fbc: formData.get('fbc') || undefined,
          fbp: formData.get('fbp') || undefined,
          user_agent: formData.get('user_agent') || undefined,
          user_ip: formData.get('user_ip') || undefined,
          google_session_attribute: formData.get('google_session_attribute') || undefined,
        };
        
        await submitLead(lead);
        
        // Redirect to WhatsApp
        window.location.href = 'https://api.whatsapp.com/send?phone=5511959774208&text=Ol%C3%A1!%20Gostaria%20de%20mais%20informa%C3%A7%C3%B5es%20sobre%20Osteopatia%20Infantil.';
        
      } catch (error) {
        console.error('Error submitting form:', error);
        console.error('Full error object:', JSON.stringify(error, null, 2));
        
        // Show more specific error message to user
        let errorMessage = 'Erro ao enviar formulário. Tente novamente.';
        if (error.message) {
          errorMessage = `Erro: ${error.message}`;
        }
        
        alert('Erro ao enviar formulário. Tente novamente.');
      } finally {
        // Reset button state
        if (submitBtn) submitBtn.disabled = false;
        btnText?.classList.remove('hidden');
        btnLoading?.classList.add('hidden');
      }
    });
  }

  // Initialize everything immediately when script loads
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize phone field with +55 prefix
    const phoneInput = document.getElementById('phone');
    if (phoneInput && !phoneInput.value) {
      phoneInput.value = '+55 ';
      currentCleanPhoneNumber = '';
    }
    
    initializeHiddenFields();
    initializeModal();
    initializeForm();
  });
</script>